/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.PessoaV1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-01-24T20:18:35.558Z")

@Api(value = "v1", description = "the v1 API")
@RequestMapping(value = "/rest")
public interface V1Api {

    @ApiOperation(value = "Alterar pessoa", nickname = "alterarPessoa", notes = "Realizar alteração no cadastro de uma pessoa.", tags={ "Pessoas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Pessoa cadastrada com sucesso"),
        @ApiResponse(code = 400, message = "Parâmetro obrigatório não informado ou inválido"),
        @ApiResponse(code = 500, message = "Erro interno no servidor") })
    @RequestMapping(value = "/v1/pessoas/{cpf}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarPessoa(@ApiParam(value = "CPF da pessoa a ser alterada no sistema.",required=true) @PathVariable("cpf") String cpf,@ApiParam(value = "" ,required=true )  @Valid @RequestBody PessoaV1 pessoa);


    @ApiOperation(value = "Cadastrar pessoa", nickname = "cadastroPessoa", notes = "Realizar o cadastro de uma pessoa no sistema", tags={ "Pessoas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Pessoa cadastrada com sucesso"),
        @ApiResponse(code = 400, message = "Parâmetro obrigatório não informado ou inválido"),
        @ApiResponse(code = 500, message = "Erro interno no servidor") })
    @RequestMapping(value = "/v1/pessoas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> cadastroPessoa(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PessoaV1 pessoa);


    @ApiOperation(value = "Buscar pessoa", nickname = "consultarPessoa", notes = "Buscar uma determinada pessoa.", response = PessoaV1.class, tags={ "Pessoas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pessoa encontrada com sucesso.", response = PessoaV1.class),
        @ApiResponse(code = 404, message = "Pessoa não encontrada.") })
    @RequestMapping(value = "/v1/pessoas/{cpf}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PessoaV1> consultarPessoa(@ApiParam(value = "CPF da pessoa a ser consultada do sistema.",required=true) @PathVariable("cpf") String cpf);


    @ApiOperation(value = "Deletar pessoa", nickname = "deletarPessoa", notes = "Deletar pessoa do sistema.", tags={ "Pessoas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Pessoa deletada com sucesso."),
        @ApiResponse(code = 404, message = "Pessoa não encontrada.") })
    @RequestMapping(value = "/v1/pessoas/{cpf}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletarPessoa(@ApiParam(value = "CPF da pessoa a ser deletada do sistema.",required=true) @PathVariable("cpf") String cpf);


    @ApiOperation(value = "Listar pessoas", nickname = "listarPessoas", notes = "Listar todas pessoas cadastrada.", response = PessoaV1.class, responseContainer = "List", tags={ "Pessoas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pessoas listada com sucesso.", response = PessoaV1.class, responseContainer = "List") })
    @RequestMapping(value = "/v1/pessoas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<PessoaV1>> listarPessoas();

}
